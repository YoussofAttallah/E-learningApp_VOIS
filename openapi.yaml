openapi: 3.0.3
info:
  title: E_Learning _VOIS - OpenAPI 3.0
  description: E_Learning API _VOIS
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
servers:
  - url: /api/
paths:
  /courses:
    post:
      tags:
        - courses
      summary: create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: created new course successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
  /courses/all:
    get:
      tags: 
        - courses
      summary: Finds All Courses
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'

  /courses/{courseId}:
    get:
      tags:
        - courses
      summary: Find course by Id
      description: Returns a single course
      operationId: getCourseById
      parameters:
        - name: courseId
          in: path
          description: Id of course to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'          
        
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'

    put:
      tags:
        - courses
      summary: update existing course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'

    delete:
      tags:
        - courses
      summary: delete specific course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: course deleted successfully
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
   
  /courses/{courseName}:
    get:
      tags:
        - courses
      summary: Find course by name
      description: Returns a single course
      operationId: getCourseByName
      parameters:
        - name: courseName
          in: path
          description: name of course to return
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'          
            
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
  /instructor/all:
    get:
      tags: 
        - instructor
      summary: Finds All instructors
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instructor'
                  
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
  
  /instructor/{instructorName}:
    get:
      tags:
        - instructor
      summary: Find instructor by name
      description: Returns a single instructor
      operationId: getInstructorByName
      parameters:
        - name: instructorName
          in: path
          description: name of instructor to return
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'          
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'

  /instructor/{instructorId}:
    get:
      tags:
        - instructor
      summary: Find instructor by Id
      description: Returns a single instructor
      operationId: getInstructorById
      parameters:
        - name: instructorId
          in: path
          description: Id of instructor to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'          
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
    put:
      tags:
        - instructor
      summary: update existing instructor
      parameters:
        - name: instructorId
          in: path
          description: Id of instructor to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instructor'
      responses:
        '200':
          description: instructor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
    delete:
      tags:
        - instructor
      summary: delete existing instructor
      parameters:
        - name: instructorId
          in: path
          description: Id of instructor to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: instructor deleted successfully
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'
  /instructor:
    post:
      tags:
        - instructor
      summary: add new instructor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instructor'
      responses:
        '200':
          description: instructor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401Error'
        '403':
          $ref: '#/components/responses/403Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '406':
          $ref: '#/components/responses/406Error'
        '415':
          $ref: '#/components/responses/415Error'
        '429':
          $ref: '#/components/responses/429Error'
        '500':
          $ref: '#/components/responses/500Error'



components:
  responses:
    400Error:
      description: Bad request
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.400.001
                message: Customer POINumber is invalid.
                path: request.body.poiNumber
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.400.001
                message: Customer POINumber is invalid.
                path: request.body.poiNumber
                url: "https://{baseURL}/developer-portal/terms"
    401Error:
      description: Unauthorized
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.401.001
                message: Unauthorized to call the target operation.
                path: authorization
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.401.001
                message: Unauthorized to call the target operation.
                path: authorization
                url: "https://{baseURL}/developer-portal/terms"
    403Error:
      description: Forbidden
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.403.001
                message: Can't find any valid subscription.
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.403.001
                message: Can't find any valid subscription.
                url: "https://{baseURL}/developer-portal/terms"
    404Error:
      description: Not found
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.404.001
                message: No resources match requested URI.
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.404.001
                message: No resources match requested URI.
                url: "https://{baseURL}/developer-portal/terms"
    405Error:
      description: Method Not Allowed
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.405.001
                message: The method is not allowed for the requested URL.
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.405.001
                message: The method is not allowed for the requested URL.
                url: "https://{baseURL}/developer-portal/terms"
    406Error:
      description: Not Acceptable
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.406.001
                message: >-
                  An appropriate representation of the requested resource could
                  not be found
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.406.001
                message: >-
                  An appropriate representation of the requested resource could
                  not be found
                url: "https://{baseURL}/developer-portal/terms"
    415Error:
      description: Unsupported Media Type
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.415.001
                message: Unsupported Content-Type
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.415.001
                message: Unsupported Content-Type
                url: "https://{baseURL}/developer-portal/terms"
    429Error:
      description: Too Many Requests
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
        Retry-After:
          description: Number in seconds to wait
          schema:
            type: integer
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.429.001
                message: Assembly Rate Limit exceeded
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.429.001
                message: Assembly Rate Limit exceeded
                url: "https://{baseURL}/developer-portal/terms"
    500Error:
      description: Internal Server Error
      headers:
        x-request-id:
          description: An RFC4122 UID used as a correlation id.
          required: true
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.500.001
                message: Internal Error
                url: "https://{baseURL}/developer-portal/terms"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            errors:
              - code: ERROR.500.001
                message: Internal Error
                url: "https://{baseURL}/developer-portal/terms"
  schemas:
    Error: 
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 404
        reason:
          type: string
          format: string
          example: "Data not found"
        message:
          type: string
          format: string
          example: "the required data does not exist"
    Course:
      type: object
      properties:
        courseId:
          type: integer
          format: int64
          example: 1046
        CourseTitle:
          type: string
          format: string
          example: "Java for beginners"
        CourseLink:
          type: string
          format: url
          example: "www.udemy.com"
        CourseImg:
          type: string
          format: url
          example: "https://www.softwaretestinghelp.com/wp-content/qa/uploads/2020/02/basic-syntax-of-Java-Programming.png"
        ViewersNum:
          type: integer
          format: int64
          example: 10
        RatingNum:
          type: integer
          format: int64
          example: 9
        RatingTotal:
          type: number
          format: float
          example: 3.5
        #this can contain an enum 
        CourseTags:
          type: array
          items: 
            type: string
            format: string
          example: ["frontend","devops"]
          
    Instructor:
      type: object
      properties:
        InstructorId:
          type: integer
          format: int64
          example: 20
        InstructorName:
          type: string
          format: string
          example: "John Wick"
        RatingNum:
          type: integer
          format: int64
          example: 9
        RatingTotal:
          type: number
          format: float
          example: 3.5
        InstructorLink:
          type: string
          format: url
          example: "www.linkedin.com"

    ErrorResponse:
      description: >-
        An array of detail error codes, and messages, and URLs to documentation
        to help remediation.
      type: object
      properties:
        errors:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/ErrorNew"
      required:
        - errors
      additionalProperties: false
    ErrorNew:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: "Low level textual error code, e.g., ERROR.400.001"
          example: ERROR.400.001
        message:
          maxLength: 500
          minLength: 1
          type: string
          description: >-
            A description of the error that occurred. e.g., 'A mandatory field
            isn't supplied' or 'RequestedExecutionDateTime must be in future'
            OBIE doesn't standardise this field
          example: Instructed identification is missing
        path:
          maxLength: 500
          minLength: 1
          type: string
          description: >-
            Recommended but optional reference to the JSON Path of the field
            with error, e.g., Data.Initiation.InstructedAmount.Currency
          example: Data.Initiation.InstructionIdentification
        url:
          type: string
          description: >-
            URL to help remediate the problem, or provide more information, or
            to API Reference, or help etc
          example: >-
            https://{baseURL}/developer-portal/term

          # Courses:
        #   type: array
        #   items: 
        #     type: integer
        #     format: CourseId
        #     example: ["frontend","devops"]


          
      xml:
        name: order
   